import os
from flask import Flask, request
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from linebot.exceptions import InvalidSignatureError
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

app = Flask(__name__)

# LINE credentials from environment
LINE_CHANNEL_ACCESS_TOKEN = 's4bmQZyQi8JWJHKaLpofp7YiqtBOzjjDkekdDDBMxmFZ18TjR0FicGtjNzGQxKNK9E6iQdxZEOcVkWVYtNDKg0Bykz8ycC/i3NZeoAI/4ngQYaqsAnKKLOoUg6JL/AP++Jj7ko8zBqaWmWpvy0qkYgdB04t89/1O/w1cDnyilFU='
LINE_CHANNEL_SECRET = 'f24a0d6a0e67b20306882e2cda6e1a04'
GOOGLE_SHEET_ID = '18XEwalClnj1dgjaG0ujT_0duhWe5NMzyNQ7Qg-9DiJE'

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# Questions (can be expanded to full 20)
questions = [
    {
        "text": "‡∏Ç‡πâ‡∏≠ 1: ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß?",
        "choices": {
            "A": {"text": "‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô", "score": "E+2"},
            "B": {"text": "‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "score": "I+2"},
            "C": {"text": "‡πÄ‡∏â‡∏¢‡πÜ", "score": "I+1"},
            "D": {"text": "‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á", "score": "E+1"},
            "E": {"text": "‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", "score": "I+0"},
        }
    },
    {
        "text": "‡∏Ç‡πâ‡∏≠ 2: ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•?",
        "choices": {
            "A": {"text": "‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "score": "T+2"},
            "B": {"text": "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å", "score": "F+2"},
            "C": {"text": "‡∏ú‡∏™‡∏°‡∏Å‡∏±‡∏ô", "score": "T+1"},
            "D": {"text": "‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á", "score": "F+1"},
            "E": {"text": "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", "score": "F+0"},
        }
    },
    # üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠ 20
]


# User session store
user_sessions = {}

@app.route("/webhook", methods=['POST'])
def webhook():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        return 'Invalid signature', 400
    return 'OK', 200

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    message_text = event.message.text.strip()

    if message_text.lower() == "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö":
        user_sessions[user_id] = {"answers": [], "current_question": 0}
        send_question(user_id)
    elif user_id in user_sessions:
        session = user_sessions[user_id]
        session["answers"].append(message_text)
        session["current_question"] += 1

        if session["current_question"] < len(questions):
            send_question(user_id)
        else:
            mbti_result = calculate_mbti(session["answers"])
            faculties = recommend_faculties(mbti_result)
            save_to_google_sheet(user_id, session["answers"], mbti_result, faculties)
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {mbti_result}\n‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞: {', '.join(faculties)}")
            )
            del user_sessions[user_id]
    else:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö MBTI")
        )

def send_question(user_id):
    session = user_sessions[user_id]
    question = questions[session["current_question"]]
    line_bot_api.push_message(user_id, TextSendMessage(text=question))

def calculate_mbti(answers):
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    return "INFP"  # placeholder

def recommend_faculties(mbti_type):
    recommendations = {
        "INFP": ["‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤", "‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå"],
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° MBTI ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    }
    return recommendations.get(mbti_type, ["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MBTI ‡∏ô‡∏µ‡πâ"])

def save_to_google_sheet(user_id, answers, mbti_result, faculties):
    timestamp = datetime.now().isoformat()
    row = [timestamp, user_id] + answers + [mbti_result, ', '.join(faculties)]
    sheet.append_row(row)

if __name__ == "__main__":
    app.run(debug=True)
